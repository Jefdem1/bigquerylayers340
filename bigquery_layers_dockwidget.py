# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BigQueryLayersDockWidget
                                 A QGIS plugin
 Add data from BigQuery
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Stefan Mandaric
        email                : stefan.mandaric@unacast.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, shutil, subprocess, sys

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal

from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsMessageLog, Qgis, QgsTask, QgsApplication, QgsDataSourceUri
from PyQt5.QtCore import QDate, QTime, QDateTime, Qt, pyqtSlot

sys.path = [os.path.join(os.path.dirname(__file__), 'bqloader', 'libs')] + sys.path
from google.cloud import bigquery

import tempfile, csv

from .bqloader.bqloader import BigQueryConnector

from .background_tasks import TestTask, BackgroundQueryTask, RetrieveQueryResultTask

import time
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtCore import *

from queue import Queue

class EverythingIsFineException(Exception):
    pass


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'bigquery_layers_dockwidget_base.ui'))


class BigQueryLayersDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None, iface=None):
        """Constructor."""
        super(BigQueryLayersDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        self.client = None
        self.base_query_job = Queue()
        #self.base_query_result = Queue()
        self.result_queue = Queue()
        self.file_queue = Queue()

        # Elements associated with base query
        self.base_query_elements = [self.project_edit, self.query_edit, self.run_query_button]

        # Elements associated with layer imports
        self.layer_import_elements = [self.geometry_column_combo_box, self.add_all_button,
                                      self.add_extents_button, self.geometry_column_label]
        for elm in self.layer_import_elements:
            elm.setEnabled(False)

        # Handle button clicks
        self.run_query_button.clicked.connect(self.run_base_query_handler)
        self.add_all_button.clicked.connect(self.add_layer_button_handler)
        self.add_extents_button.clicked.connect(self.add_layer_button_handler)

        # Changed text
        self.project_edit.textChanged.connect(self.text_changed_handler)
        self.query_edit.textChanged.connect(self.text_changed_handler)

        self.base_query_complete = False

    def run_background_query(self, project_name, query):
        if not self.client:
            self.client = bigquery.Client(project_name)

        result = Queue()

        query_task = BackgroundQueryTask('Background Query', self.iface, self.client, query, result)
        QgsApplication.taskManager().addTask(base_query_task)
        


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def text_changed_handler(self):
        self.base_query_complete = False
        self.query_progress_field.clear()
        self.geometry_column_combo_box.clear()

        for elm in self.layer_import_elements:
            elm.setEnabled(False)

    def run_query_handler(self):
        # GUI
        self.base_query_complete = False

        for elm in self.base_query_elements + self.layer_import_elements:
            elm.setEnabled(False)

        self.run_query_button.setText('Running...')
        self.run_query_button.repaint()

        QgsMessageLog.logMessage('Button pressed', 'BigQuery Layers', Qgis.Info)

        # Run query as a task
        #query_task =  BackgroundQueryTask('Background Query', iface=self.iface, client, query, result) T

        base_query_task = QgsTask.fromFunction('Base query task', self.run_base_query, on_finished=self.base_query_completed)
        QgsApplication.taskManager().addTask(base_query_task)
        QgsMessageLog.logMessage('Button pressed bottom', 'BigQuery Layers', Qgis.Info)

    def run_base_query_handler(self):
        QgsMessageLog.logMessage('Running base query', 'BigQuery Layers', Qgis.Info)
        project_name = self.project_edit.text()
        query = self.query_edit.toPlainText()
        self.client = bigquery.Client(project_name)


        for elm in self.base_query_elements + self.layer_import_elements:
            elm.setEnabled(False)
        self.run_query_button.setText('Running...')
        self.run_query_button.repaint()
        
        self.base_query_task = BackgroundQueryTask('Background Query',
            self.iface,
            self.client,
            query,
            self.base_query_job,
            self.query_progress_field,
            self.geometry_column_combo_box,
            self.base_query_elements,
            self.layer_import_elements,
            self.run_query_button
            )
        QgsApplication.taskManager().addTask(self.base_query_task)

        QgsMessageLog.logMessage('After task manager', 'BigQuery Layers', Qgis.Info)



    def base_query_completed(self, exception, result=None):
        if exception is None:
            # Should always return exception
            QgsMessageLog.logMessage('This should not occur', 'BigQuery Layers', Qgis.Info)
        else:
            if isinstance(exception, EverythingIsFineException):
                # Query completed without errors
                QgsMessageLog.logMessage('Completed fine', 'BigQuery Layers', Qgis.Info)

                # Number of rows in query
                rowcount = str(self.bq.num_rows_base())

                # Columns in query
                fields = self.bq.fields()
                self.geometry_column_combo_box.addItems(fields)

                self.query_progress_field.setText('Rows returned: {}'.format(rowcount))
                # self.query_progress_field.adjustSize()

                # Enable all elements
                self.base_query_complete = True
                for elm in self.base_query_elements + self.layer_import_elements:
                    elm.setEnabled(True)
                self.run_query_button.setText('Run query')

            else:
                QgsMessageLog.logMessage('Completed with errors', 'BigQuery Layers', Qgis.Info)
                self.base_query_complete = False

                # Enable top buttons, import buttons are disabled
                for elm in self.base_query_elements:
                    elm.setEnabled(True)
                self.run_query_button.setText('Run query')
                self.query_progress_field.setText('Errors in base query')
                self.iface.messageBar().pushMessage("BigQuery Layers", "Query failed: " + exception.__repr__(), level=Qgis.Critical)
                raise exception

    def add_full_layer(self, task, uri):
        QgsMessageLog.logMessage('Running add full layer', 'BigQuery Layers', Qgis.Info)

        layer_file = self.bq.write_base_result()
        self.layer_file_path = layer_file
        self.layer_uri = uri.format(file=layer_file)

        raise EverythingIsFineException()

    def newTask(self):
        """Create a task and add it to the Task Manager"""
        self.task = TestTask('Custom Task')
        #connect to signals from the background threads to perform gui operations
        #such as updating the progress bar
        self.task.begun.connect(lambda: QgsMessageLog.logMessage('Beginnging', 'Test task', Qgis.Info))
        self.task.progressChanged.connect(lambda: self.prog.setValue(self.task.progress()))
        self.task.taskCompleted.connect(lambda: QgsMessageLog.logMessage('Beginnging', 'Test task', Qgis.Info))
        ##self.task.taskTerminated.connect(self.TaskCancelled)
        QgsApplication.taskManager().addTask(self.task)

    def add_extents(self, task, uri, extent_wkt, geom_field):
        QgsMessageLog.logMessage('Running add extent layer', 'BigQuery Layers', Qgis.Info)

        layer_file = self.bq.write_extent_result(extent_wkt, geom_field)
        self.layer_file_path = layer_file
        self.layer_uri = uri.format(file=layer_file)

        raise EverythingIsFineException()

    def run_bigquery(self, task, q):
        QgsMessageLog.logMessage('IN run_bigquert', 'BigQuery Layers', Qgis.Info)
        client = bigquery.Client('uc-shoppertrak-poc')
        query_job = client.query(q)
        QgsMessageLog.logMessage('Running query', 'BigQuery Layers', Qgis.Info)
        QgsMessageLog.logMessage(q, 'BigQuery Layers', Qgis.Info)
        query_result = query_job.result()
        print("got result")
        self.test_query_result = query_result

        raise EverythingIsFineException()

    def write_to_tempfile(self, task, progress):
        QgsMessageLog.logMessage('In write tempfiel task', 'BigQuery Layers', Qgis.Info)
        query_result = self.test_query_result
        schema_fields =  [field.name for field in query_result.schema]
        total_rows = query_result.total_rows
        QgsMessageLog.logMessage('Total rows: '+str(total_rows), 'BigQuery Layers', Qgis.Info)
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as fp:
            filepath = fp.name
            writer = csv.DictWriter(fp, fieldnames=schema_fields)
            writer.writeheader()
            progress_percent = 0
            progress.setValue(progress_percent)
            QgsMessageLog.logMessage('File path: '+filepath, 'BigQuery Layers', Qgis.Info)
            #self.progressBar.reset()
            #self.progressBar.setValue(progress_percent)

            for i, row in enumerate(query_result, 1):
                
                new_progress_percent = int(100 * (i / total_rows))
                if new_progress_percent > progress_percent:
                    progress_percent = new_progress_percent
                    progress.setValue(progress_percent)
                    #self.progressBar.setValue(progress_percent)
                    QgsMessageLog.logMessage(str(progress_percent), 'BigQuery Layers', Qgis.Info)

                writer.writerow(dict(row.items()))
            self.last_filepath = filepath
        
        raise EverythingIsFineException()

    def write_task_starter(self, exception, result=None):

        QgsMessageLog.logMessage('In write task starter', 'BigQuery Layers', Qgis.Info)
        

        progressMessageBar = self.iface.messageBar().createMessage("Doing something boring...")
        progress = QProgressBar()
        progress.setMaximum(100)
        progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
        progressMessageBar.layout().addWidget(progress)
        self.iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)


        task = TestTask('Custom Task', iface=self.iface)
        #connect to signals from the background threads to perform gui operations
        #such as updating the progress bar
        task.begun.connect(lambda: QgsMessageLog.logMessage('Beginnging', 'Test task', Qgis.Info))
        task.progressChanged.connect(lambda: progress.setValue(task.progress()))
        task.taskCompleted.connect(lambda: QgsMessageLog.logMessage('Completed', 'Test task', Qgis.Info))
        ##self.task.taskTerminated.connect(self.TaskCancelled)
        QgsApplication.taskManager().addTask(task)

        #task = QgsTask.fromFunction('Download file', self.write_to_tempfile, on_finished=None, progress=progress)
        #QgsApplication.taskManager().addTask(task)
        #QgsMessageLog.logMessage('asdasd', 'BigQuery Layers', Qgis.Info)
    
    def add_layer_button_handler(self):
        geom_field = self.geometry_column_combo_box.currentText()

        base_query_job = self.base_query_job.get()
        self.base_query_job.put(base_query_job)

        for elm in self.base_query_elements + self.layer_import_elements:
            elm.setEnabled(False)
        
        if self.sender().objectName() == 'add_all_button':
            QgsMessageLog.logMessage('Pressed add all', 'BigQuery Layers', Qgis.Info)
            self.add_all_button.setText('Adding layer...')

            # TASK 1: DOWNLOAD
            self.download_task = RetrieveQueryResultTask('Retrieve query result', self.iface, base_query_job, self.file_queue)
            QgsApplication.taskManager().addTask(self.download_task)


            #task = QgsTask.fromFunction('Add layer', self.add_full_layer, on_finished=self.layer_added, uri=uri)
        elif self.sender().objectName() == 'add_extents_button':
            self.add_extents_button.setText('Adding layer...')
            QgsMessageLog.logMessage('Add layer', 'BigQuery Layers', Qgis.Info)
            extent = self.iface.mapCanvas().extent()

            # Reproject extents if project CRS is not EPSG:4326
            project_crs = self.iface.mapCanvas().mapSettings().destinationCrs()
            
            if project_crs != QgsCoordinateReferenceSystem(4326):
                crcTarget = QgsCoordinateReferenceSystem(4326)
                transform = QgsCoordinateTransform(project_crs, crcTarget, QgsProject.instance())
                extent = transform.transform(extent)

            task = QgsTask.fromFunction('Add layer', self.add_extents, on_finished=self.layer_added,
                                        uri=uri, extent_wkt=extent.asWktPolygon(), geom_field=geom_field)


    def add_layer_button_handler_old2(self):
        if self.sender().objectName() == 'add_all_button':
            QgsMessageLog.logMessage('New layer button handler', 'BigQuery Layers', Qgis.Info)
            self.add_all_button.setText('Adding layer...')
            print(self.query_edit.toPlainText())
            task = QgsTask.fromFunction('Run query', self.run_bigquery, on_finished=self.write_task_starter, q=self.query_edit.toPlainText())
            self.add_all_button.setText('Add layer')
            QgsApplication.taskManager().addTask(task)
            QgsMessageLog.logMessage('Below started task', 'BigQuery Layers', Qgis.Info)


    def add_layer_button_handler_old(self):
        assert self.base_query_complete

        geom_field = self.geometry_column_combo_box.currentText()

        # Windows support
        if os.name == 'nt':
            uri = 'file:///{{file}}?delimiter=,&crs=epsg:4326&wktField={field}'.format(field=geom_field)
        else:
            uri = 'file://{{file}}?delimiter=,&crs=epsg:4326&wktField={field}'.format(field=geom_field)

        for elm in self.base_query_elements + self.layer_import_elements:
            elm.setEnabled(False)

        if self.sender().objectName() == 'add_all_button':
            QgsMessageLog.logMessage('Pressed add all', 'BigQuery Layers', Qgis.Info)
            self.add_all_button.setText('Adding layer...')
            task = QgsTask.fromFunction('Add layer', self.add_full_layer, on_finished=self.layer_added, uri=uri)
        elif self.sender().objectName() == 'add_extents_button':
            self.add_extents_button.setText('Adding layer...')
            QgsMessageLog.logMessage('Add layer', 'BigQuery Layers', Qgis.Info)
            extent = self.iface.mapCanvas().extent()

            # Reproject extents if project CRS is not EPSG:4326
            project_crs = self.iface.mapCanvas().mapSettings().destinationCrs()
            
            if project_crs != QgsCoordinateReferenceSystem(4326):
                crcTarget = QgsCoordinateReferenceSystem(4326)
                transform = QgsCoordinateTransform(project_crs, crcTarget, QgsProject.instance())
                extent = transform.transform(extent)

            task = QgsTask.fromFunction('Add layer', self.add_extents, on_finished=self.layer_added,
                                        uri=uri, extent_wkt=extent.asWktPolygon(), geom_field=geom_field)

        self.run_query_button.repaint()
        QgsApplication.taskManager().addTask(task)
        # For some reason it needs to log in order for tasks to run
        QgsMessageLog.logMessage('After add button', 'BigQuery Layers', Qgis.Info)

    def layer_added(self, exception, result=None):
        if exception is None:
            # Should always return exception
            QgsMessageLog.logMessage('This should not occur', 'BigQuery Layers', Qgis.Info)
        else:
            QgsMessageLog.logMessage('Layer added', 'BigQuery Layers', Qgis.Info)
            if isinstance(exception, EverythingIsFineException):
                #ogr2ogr stuff - move to background process?
                gpkg_layer_name = self.csv_to_spatiallite()

                # Must be done in main thread
                try:
                    if gpkg_layer_name:
                        gpkg_layer = gpkg_layer_name + '|layername=' + gpkg_layer_name.split('/')[-1].split('.')[0]
                        display_name = 'BigQuery layer'
                        vlayer = self.iface.addVectorLayer(gpkg_layer, display_name, 'ogr')
                    else:
                        vlayer = self.iface.addVectorLayer(self.layer_uri, 'BigQuery layer', 'delimitedtext')
                    if vlayer:
                        elements_added = BigQueryConnector.num_rows(self.bq.client, self.bq.last_query_run)
                        self.iface.messageBar().pushMessage('BigQuery Layers', 'Added {} elements'.format(elements_added), 
                            level=Qgis.Info)
                except Exception as e:
                    print(e)

            else:
                QgsMessageLog.logMessage(exception.__repr__(), 'BigQuery Layers', Qgis.Critical)

            self.add_all_button.setText('Add all')
            self.add_extents_button.setText('Add window extents')
            for elm in self.base_query_elements + self.layer_import_elements:
                elm.setEnabled(True)

    def csv_to_spatiallite(self):
        ogr2ogr_executable = shutil.which('ogr2ogr')
        geom_field = self.geometry_column_combo_box.currentText()

        if not ogr2ogr_executable:
            QgsMessageLog.logMessage('ogr2ogr executable not found', 'BigQuery Layers', Qgis.Info)
            return

        cp_params = [
            'cp',
            self.layer_file_path,
            self.layer_file_path + '.csv'
        ]

        ogr2ogr_params = [
            ogr2ogr_executable,
            '-f', 'GPKG', '{}.gpkg'.format(self.layer_file_path),
            self.layer_file_path + '.csv',
            '-oo', 'HEADERS=YES',
            '-oo', 'GEOM_POSSIBLE_NAMES={}'.format(geom_field),
            '-a_srs', 'EPSG:4326'
        ]

        try:
            subprocess.check_output(cp_params)
            subprocess.check_output(ogr2ogr_params)
        except Exception as e:
            print(e)

        return self.layer_file_path + ".gpkg"





